---
title: "VSCodeでのTeXの使い方"
author: "宮森祥行"
date: last-modified
format:
  html:
    code-copy: true
    date-format: "YYYY年M月D日"
    toc: true
    embed-resources: true
---

　ここでは最低限の使い方だけを説明する．

# TeX

　ちょっと編集するだけならダブルクリックでファイルだけを開いても良いが，基本的にはフォルダごと開く方が良い．`command` + `O` (openのO)でフォルダを選択して開く．

::: callout-note
新規で作成したいときも`command` + `O`の後，場所を選んでから「新規フォルダ」をクリックして作成して，それを開けば良い．
:::
まとめて開くこともできるし，大きいファイルで開いておいて後からVSCode上で移動することもできる．ちょうど良いように開こう．フォルダで開くと，VSCodeで開くターミナルのカレントディレクトリがそのフォルダに設定される．フォルダを閉じたいときは`command` + `K`からの`F`で良い．あるいはそのまま新しく開きたいフォルダを開いても良い．新しいウィンドウを開きたいときは`command` + `shift` + `N` (NewのN)．

　サイドバーの一番上の「書類が2枚重なっているアイコン」をエクスプローラーと呼ぶ．ここをクリックすると，先ほど開いたフォルダがあるはず．ファイルを開きたければクリックすれば良い．

::: callout-note
新しいファイルを作りたい場合はフォルダのところにカーソルを合わせると，「書類の左下に+のアイコン」があるのでクリックし，拡張子まで含めて名前をつければ良い．
:::

もう一度サイドバーのエクスプローラーアイコンを押すと，この画面をしまうことができる．

　さて，.texファイルを開くと右上に「緑の三角ボタン」があるはずだが，それがコンパイルボタンである．左下を見ると，error数及びwarning数と，コンパイル完了のチェックあるいはコンパイル失敗のバツがある．

　コンパイルボタンの右隣にある「2面の右下に虫眼鏡のあるボタン」を押すとコンパイルしたpdfを表示してくれる．さらにその右隣の「2面ボタン」を押すと，2面に分割して作業できる．その上の「上下に2面のボタン」を押すと，今開いているフォルダがカレントディレクトリのターミナルや，エラーメッセージを開くことができる．エラーメッセージをクリックするとその場所へカーソルが飛ぶ．エラー部分のコードをカーソルで選択すると，その左に「黄色風船の右下にキラキラ」アイコンが出るのでそれをクリックすると，「修正」とあるのでクリックすると，Copilotがデバッグしてくれる．確認してそれで良さそうだったら「同意する」をクリックすれば確定する．

::: callout-tip
この機能はデバッグに限った話ではなく，例えばalign*環境を忘れて数式を書き始めてしまった時は，その部分を選択して同じアイコンをクリックすれば「ブロックの挿入 align*」というものがあるのでクリックすれば良かったりと，いろいろ便利である．
:::

　先ほどのボタンの右隣の「右が細い2面のボタン」を押すと，Copilotのchatが開く．もう一度押すと元に戻る．Copilot chatはdefaultで今開いているファイルをコンテキストに読み込んでくれるので，全体の文脈を把握して返答してくれ非常に使い勝手が良い．コンテキストファイルを追加したりAIのモデルを選択することもできる．

　次にサイドバーの「TeXアイコン」をクリックすると，一番上に「コマンド」があり，それを展開してさらに一番上の「LaTeXプロジェクトをビルド」を展開すると，一番上に「補助ファイルをクリア」というのがある．エラーじゃないのにうまくいかない時や，全部終わった後などに実行しよう．

::: callout-tip
[最近のAI雑談](4_generative_ai.qmd)で触れているAIエージェントにデバッグしてもらうこともできる．一言エラーを直してと言えば自動的にtexファイルを読み込み，それで明らかなエラー箇所が見つからなければlogファイルを読み込んだりウェブ検索をしたりしてエラー箇所を特定し，texファイルを書き直してくれるので，良さそうならOKすれば良い．いい時代だ．
:::

# Git & GitHub

　サイドバーの「枝分かれしているアイコン」がGitのアイコンであり，まだGit管理していないフォルダを開いた状態でそこをクリックすると，「GitHubに公開」というボタンがあるのでクリックすると，上部に`Publish to GitHub private repository`と`Publish to GitHub public repository`という選択肢が出るので，公開したい時以外は基本的にprivateを選び，バージョン管理したいファイルを選択しよう．するとそのフォルダに.gitという隠しフォルダ(ローカルリポジトリ)が作成され，GitHubにそのフォルダと同じ名前のリモートリポジトリが作成され，先ほど選んだファイルがコミットされる．(リポジトリとコミットは後で説明する．)

::: callout-warning
その上の「リポジトリを初期化する」というボタンをクリックすると，単に隠しフォルダ.gitが作成されるだけである．基本的にはクラウドに上げてバックアップをとった方がいいので「GitHubに公開」をクリックしよう．
:::
リポジトリ(repository)というのは保管庫という意味．.DS_Storeという隠しファイルが表示されるが，ファイルの隣にuntrackedのUがついているので気にしなくていい．

　これで初期設定は終わったのでサイドバーからエクスプローラーに戻り作業を進めよう．編集するとファイル名にmodifiedのMが表示される．

## commit

　バージョン管理というのは要するにゲームのセーブポイントを作るようなものである．ここではそのセーブポイントを作る操作を話す．

　セーブポイントのデータを記録しておく場所が先ほど作ったリポジトリであり，セーブポイントを申請する操作をコミット (commit)と呼ぶ．コミットする前にコミットしたいものを集めておく場所をステージ(stage)と呼び，ステージに移動させる操作をaddと呼ぶ．一つのフォルダで複数のファイルをGit管理していると，一部だけコミットしたい気分になるためこのステップがある．

　さて，コミットしたくなったらサイドバーでGitの画面に戻ろう．するとさっき自分がエクスプローラーで編集したファイルがあるはずである．コミットしたいファイルにカーソルを合わせて+ボタンを押すと，そのファイルがステージに移動する．ステージにファイルが上がるとコミットボタンとその上にメッセージ枠が出る．コミットしたいものを全部ステージに上げたら，あとで振り返った時にどの状態のセーブポイントかわかりやすいようにメッセージ枠に必ずコメントして(コメントがないとコミットできない)，その後コミットボタンをクリックする．これでパソコンのローカルリポジトリへのコミットが完了し，一つセーブポイントができた．その後「変更の同期」ボタンが出現するのでクリックすると，先ほどのコミットをGitHubのリモートリポジトリにも反映できる(pushするという)．

　終わったら再びサイドバーからエクスプローラーに戻り作業すれば良い．大きく削除したり大きく構成を変えたりする前は必ずコミットするようにしよう．

## branch

　この節では途中で前のセーブポイントの状態に戻したくなった場合の操作を話す．拡張機能からGit Graphをinstallしていた場合は左下に`Git Graph`と書いてあるはずであり，これをクリックするとコミット履歴が一本の棒で表されている．各コミット地点をクリックすればコミットしたファイルを見ることができる(見ることしかできない)．目当ての戻したい状態を見つけたら，そこでダブルクリックして，Create Branchをクリックし，ポップアップに新しいbranch名を好きに書きcheck outにチェックを入れて[^1]Create Branchボタンをクリックする．するとグラフの形が変わり，先ほどまでいたmainという名前のbranchが横に伸びる枝に変わり，今新しく作ったbranchが真っ直ぐ伸びているはずである．サイドバーからGitの画面に行くと「Branchの発行」ボタンがあるのでクリックしてGitHubにpushしておこう．

[^1]: チェックを入れると，新しいbranchを作成後，そのbranchに切り替わる．

　サイドバーからエクスプローラーに戻って目当てのファイルを開くと，前にコミットした時の状態に戻っているはずである．左下に今いるbranch名が書いてあり，クリックすると上部に今のbranchのリストが表示され，クリックして移動できる．

　以上でGitの感覚がなんとなく掴めたと思う．ここで書いた操作はGitマナー的には少々よろしくないが，一人で使う分には問題ないのでわかりやすさを優先した．Gitはまだまだいろいろな操作ができるので興味があれば調べて欲しい．